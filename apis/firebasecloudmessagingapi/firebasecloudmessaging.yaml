openapi: 3.0.1
info:
  title: Firebase Cloud Messaging API(s)
  description: |-
    - Firebase Cloud Messaging resources API  is a cross-platform solution for sending notifications on Android, iOS, and web applications.
    - The URL for Firebase Cloud Messaging API(s) is `data/v1/notification`.
  version: "1.0"
externalDocs:
 description: "Testcases"
 url: "https://www.getpostman.com/collections/ffe4173b373bb1a1f72c"
servers:
- url: https://staging.open-sunbird.org/api
paths:
  /data/v1/notification/send:
    post:
      tags:
      - Firebase Cloud Messaging API(s)
      summary: Send a push notification
      description: |-
        This API is associated with sending a push notification to mobile devices on the Sunbird Platform.
           - The endpoint for **Firebase Cloud Messaging API(s)** is `/data/v1/notification/send`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: SendPost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded'"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for sending a push notification.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FcmPushrequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FcmPushrequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FcmPushrequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."send push notification" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "send push notification" operation failed
            ! The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      x-unitTests:
      - request:
          method: POST
          uri: /data/v1/notification/send
          headers:
            Content-Type: application/json
            Authorization: Bearer {{api-key}}
          body: |-
            {
            "request": {
                "to":"SunbirdNotif",
                "type":"fcm",
              "data": {
                  "title" : "Announcement!!",
                  "notifType" : "announcement",
                  "summary" : "New announcement from rootOrg",
                  "body" : "www.staging-sunbird.org/new/announcement"
                }
              }
            }
          expectedResponse:
            x-allowExtraHeaders: true
            x-bodyMatchMode: NONE
            x-arrayOrderedMatching: false
            x-arrayCheckCount: false
            x-matchResponseSchema: true
            headers: {}
          x-testShouldPass: true
          x-testEnabled: true
          x-testName: fcm push
          x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /data/v1/notification/audience:
    post:
      tags:
        - Firebase Cloud Messaging API(s)
      summary: Get Audience/User count
      description: |-
        This API is associated with getting user count to send a push notification to mobile
        devices on the Sunbird Platform.
           - The endpoint for **Firebase Cloud Messaging API(s)** is `/data/v1/notification/audience`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: GetUserCount
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:-
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded'
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: |-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for sending a push notification.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getUserCountRequest'
        required: true
      responses:
        '200':
          description: |-
            OK ! Successful operation."get user count" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserCountResponse'
        '400':
          description: |-
            BAD REQUEST. The "get user count" operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserCountErrorResponse'
        '500':
          description: |-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      x-unitTests:
      - request:
          method: POST
          uri: /data/v1/notification/audience
          headers:
            Content-Type: application/json
            Authorization: Bearer {{api-key}}
          body: |-
            {
              "request": {
                  "locationIds": ["SunbirdNotif"]
              }
            }
          expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: fcm push
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
components:
  schemas:
    getUserCountRequest:
      title: getUserCountRequest
      required:
        - request
        - locationIds
      type: object
      properties:
        request:
          type: object
          properties:
            locationIds:
              type: array
              items:
                type: string
              description: 'Location ids'
              example: 0131772445367336966
      example:
        request:
          locationds: ["0131772445367336966"]
    getUserCountResponse:
      description: User Count Response
      allOf:
        - $ref: '#/components/schemas/ResponseHeader'
      properties:
        result:
          type: object
          properties:
            locations:
              type: array
              items:
                type: object
                properties:
                  userCount:
                    type: number
                    description: user count
                  id:
                    type: string
                    description: location id
    getUserCountErrorResponse:
      title: User Count Error Response
      allOf:
        - $ref: '#/components/schemas/EmptyResult'
        - $ref: '#/components/schemas/ResponseHeader'
    FcmPushrequest:
      title: fcm pushRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/Request'
      example:
        request:
          to: SunbirdNotif
          type: fcm
          data:
            title: Announcement!!
            notifType: announcement
            summary: New announcement from rootOrg
            body: www.staging-sunbird.org/new/announcement
    Request:
      title: Request
      required:
      - data
      - to
      - type
      type: object
      properties:
        to:
          type: string
          description: ""
          example: SunbirdNotif
        type:
          type: string
          description: ""
          example: fcm
        data:
          $ref: '#/components/schemas/Data'
      example:
        to: SunbirdNotif
        type: fcm
        data:
          title: Announcement!!
          notifType: announcement
          summary: New announcement from rootOrg
          body: www.staging-sunbird.org/new/announcement
    Data:
      title: Data
      required:
      - body
      - notifType
      - summary
      - title
      type: object
      properties:
        title:
          type: string
          description: ""
          example: Announcement!!
        notifType:
          type: string
          description: ""
          example: announcement
        summary:
          type: string
          description: ""
          example: New announcement from rootOrg
        body:
          type: string
          description: ""
          example: www.staging-sunbird.org/new/announcement
      example:
        title: Announcement!!
        notifType: announcement
        summary: New announcement from rootOrg
        body: www.staging-sunbird.org/new/announcement
    NotificationResponseWrapper:
      title: wrapper for FCM notification response
      type: object
      properties:
        result:
          $ref: '#/components/schemas/NotificationResponse'
    ContentCreateResponse:
      description: Create Content Response
      allOf:
      - $ref: '#/components/schemas/NotificationResponseWrapper'
      - $ref: '#/components/schemas/ResponseHeader'
    ResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    ResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    EmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    NotificationResponse:
      type: object
      properties:
        response:
          type: string
          description: FCM response msg id.
    ContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
      - $ref: '#/components/schemas/EmptyResult'
      - $ref: '#/components/schemas/ResponseHeader'
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
